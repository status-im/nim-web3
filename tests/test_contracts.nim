# nim-web3
# Copyright (c) 2018-2023 Status Research & Development GmbH
# Licensed under either of
#  * Apache License, version 2.0, ([LICENSE-APACHE](LICENSE-APACHE))
#  * MIT license ([LICENSE-MIT](LICENSE-MIT))
# at your option.
# This file may not be copied, modified, or distributed except according to
# those terms.

import
  std/[options, json],
  pkg/unittest2,
  chronos, stint,
  ../web3,
  ./helpers/utils

type
  Data1 = object
    a: UInt256
    data: seq[byte]

contract(EncodingTest):
  proc setBool(val: bool)
  proc getBool(): bool {.view.}
  proc setData1(a: UInt256, d: seq[byte])
  proc getData1(): Data1
  proc getManyData1(): seq[Data1]

const EncodingTestCode =  "608060405260008060006101000a81548160ff02191690831515021790555034801561002a57600080fd5b50610b508061003a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806312a7b9141461005c5780631cb3eebe1461007a5780631e26fd33146100965780639944cc71146100b25780639fd159e6146100d0575b600080fd5b6100646100ee565b60405161007191906103cf565b60405180910390f35b610094600480360381019061008f919061048f565b610104565b005b6100b060048036038101906100ab919061051b565b610187565b005b6100ba6101a3565b6040516100c79190610624565b60405180910390f35b6100d8610259565b6040516100e59190610745565b60405180910390f35b60008060009054906101000a900460ff16905090565b604051806040016040528084815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600160008201518160000155602082015181600101908161017e91906109a2565b50905050505050565b806000806101000a81548160ff02191690831515021790555050565b6101ab61039a565b6001604051806040016040529081600082015481526020016001820180546101d2906107c5565b80601f01602080910402602001604051908101604052809291908181526020018280546101fe906107c5565b801561024b5780601f106102205761010080835404028352916020019161024b565b820191906000526020600020905b81548152906001019060200180831161022e57829003601f168201915b505050505081525050905090565b6060600367ffffffffffffffff81111561027657610275610767565b5b6040519080825280602002602001820160405280156102af57816020015b61029c61039a565b8152602001906001900390816102945790505b50905060005b8151811015610396576001604051806040016040529081600082015481526020016001820180546102e5906107c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610311906107c5565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b50505050508152505082828151811061037a57610379610a74565b5b60200260200101819052508061038f90610ad2565b90506102b5565b5090565b604051806040016040528060008152602001606081525090565b60008115159050919050565b6103c9816103b4565b82525050565b60006020820190506103e460008301846103c0565b92915050565b600080fd5b600080fd5b6000819050919050565b610407816103f4565b811461041257600080fd5b50565b600081359050610424816103fe565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261044f5761044e61042a565b5b8235905067ffffffffffffffff81111561046c5761046b61042f565b5b60208301915083600182028301111561048857610487610434565b5b9250929050565b6000806000604084860312156104a8576104a76103ea565b5b60006104b686828701610415565b935050602084013567ffffffffffffffff8111156104d7576104d66103ef565b5b6104e386828701610439565b92509250509250925092565b6104f8816103b4565b811461050357600080fd5b50565b600081359050610515816104ef565b92915050565b600060208284031215610531576105306103ea565b5b600061053f84828501610506565b91505092915050565b610551816103f4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610591578082015181840152602081019050610576565b60008484015250505050565b6000601f19601f8301169050919050565b60006105b982610557565b6105c38185610562565b93506105d3818560208601610573565b6105dc8161059d565b840191505092915050565b60006040830160008301516105ff6000860182610548565b506020830151848203602086015261061782826105ae565b9150508091505092915050565b6000602082019050818103600083015261063e81846105e7565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060408301600083015161068a6000860182610548565b50602083015184820360208601526106a282826105ae565b9150508091505092915050565b60006106bb8383610672565b905092915050565b6000602082019050919050565b60006106db82610646565b6106e58185610651565b9350836020820285016106f785610662565b8060005b85811015610733578484038952815161071485826106af565b945061071f836106c3565b925060208a019950506001810190506106fb565b50829750879550505050505092915050565b6000602082019050818103600083015261075f81846106d0565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107dd57607f821691505b6020821081036107f0576107ef610796565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026108587fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261081b565b610862868361081b565b95508019841693508086168417925050509392505050565b6000819050919050565b600061089f61089a610895846103f4565b61087a565b6103f4565b9050919050565b6000819050919050565b6108b983610884565b6108cd6108c5826108a6565b848454610828565b825550505050565b600090565b6108e26108d5565b6108ed8184846108b0565b505050565b5b81811015610911576109066000826108da565b6001810190506108f3565b5050565b601f82111561095657610927816107f6565b6109308461080b565b8101602085101561093f578190505b61095361094b8561080b565b8301826108f2565b50505b505050565b600082821c905092915050565b60006109796000198460080261095b565b1980831691505092915050565b60006109928383610968565b9150826002028217905092915050565b6109ab82610557565b67ffffffffffffffff8111156109c4576109c3610767565b5b6109ce82546107c5565b6109d9828285610915565b600060209050601f831160018114610a0c57600084156109fa578287015190505b610a048582610986565b865550610a6c565b601f198416610a1a866107f6565b60005b82811015610a4257848901518255600182019150602085019450602081019050610a1d565b86831015610a5f5784890151610a5b601f891682610968565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610add826103f4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b0f57610b0e610aa3565b5b60018201905091905056fea2646970667358221220265a3d7b004b7ea36bfc364804ed8717fcb6adf60b5edf24d773660fb7c736df64736f6c63430008130033"

#[ Contract EncodingTest
pragma solidity ^0.8.0;

contract EncodingTest {
    bool boolVal = false;

    struct Data1 {
        uint a;
        bytes data;
    }

    Data1 data1;

    function setBool(bool _boolVal) public {
        boolVal = _boolVal;
    }

    function getBool() public view returns (bool) {
        return boolVal;
    }

    function setData1(uint a, bytes calldata data) public {
        data1 = Data1(a, data);
    }

    function getData1() public view returns(Data1 memory) {
        return data1;
    }

    function getManyData1() public view returns(Data1[] memory result) {
        result = new Data1[](3);
        for (uint i = 0; i < result.length; ++i) {
            result[i] = data1;
        }
    }
}
]#

#[ Contract NumberStorage
pragma solidity ^0.4.18;

contract NumberStorage {
   uint num;

   function setNumber(uint _num) public {
       num = _num;
   }

   function getNumber() public constant returns (uint) {
       return num;
   }
}
]#
contract(NumberStorage):
  proc setNumber(number: UInt256)
  proc getNumber(): UInt256 {.view.}

const NumberStorageCode = "6060604052341561000f57600080fd5b60bb8061001d6000396000f30060606040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633fb5c1cb8114604d578063f2c9ecd8146062575b600080fd5b3415605757600080fd5b60606004356084565b005b3415606c57600080fd5b60726089565b60405190815260200160405180910390f35b600055565b600054905600a165627a7a7230582023e722f35009f12d5698a4ab22fb9d55a6c0f479fc43875c65be46fbdd8db4310029"

#[ Contract MetaCoin
pragma solidity >=0.4.25 <0.6.0;

contract MetaCoin {
    mapping (address => uint) balances;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    constructor() public {
        balances[tx.origin] = 10000;
    }

    function sendCoin(address receiver, uint amount) public returns(bool sufficient) {
        if (balances[msg.sender] < amount) return false;
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
        emit Transfer(msg.sender, receiver, amount);
        return true;
    }

    function getBalance(address addr) public view returns(uint) {
        return balances[addr];
    }
}
]#
contract(MetaCoin):
  proc sendCoin(receiver: Address, amount: UInt256): bool
  proc getBalance(address: Address): UInt256 {.view.}
  proc Transfer(fromAddr, toAddr: indexed[Address], value: UInt256) {.event.}
  proc BlaBla(fromAddr: indexed[Address]) {.event.}

const MetaCoinCode = "608060405234801561001057600080fd5b5032600090815260208190526040902061271090556101c2806100346000396000f30060806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166390b98a118114610050578063f8b2cb4f14610095575b600080fd5b34801561005c57600080fd5b5061008173ffffffffffffffffffffffffffffffffffffffff600435166024356100d5565b604080519115158252519081900360200190f35b3480156100a157600080fd5b506100c373ffffffffffffffffffffffffffffffffffffffff6004351661016e565b60408051918252519081900360200190f35b336000908152602081905260408120548211156100f457506000610168565b336000818152602081815260408083208054879003905573ffffffffffffffffffffffffffffffffffffffff871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060015b92915050565b73ffffffffffffffffffffffffffffffffffffffff16600090815260208190526040902054905600a165627a7a72305820000313ec0ebbff4ffefbe79d615d0ab019d8566100c40eb95a4eee617a87d1090029"

proc `$`(list: seq[Address]): string =
  result.add '['
  for x in list:
    result.add $x
    result.add ", "
  result.add ']'

suite "Contracts":
  setup:
    var web3: Web3
    var accounts: seq[Address]

    proc asyncsetup {.async.} =
      web3 = await newWeb3("ws://127.0.0.1:8545/")
      accounts = await web3.provider.eth_accounts()
      echo "accounts: ", accounts
      web3.defaultAccount = accounts[0]
    waitFor asyncsetup()

  teardown:
    proc asyncteardown {.async.} =
      await web3.close()
    waitFor asyncteardown()

  test "encoding test":
    proc asynctest {.async.} =
      let
        receipt = await web3.deployContract(EncodingTestCode)
        cc = receipt.contractAddress.get
      echo "Deployed EncodingTest contract: ", cc

      let ns = web3.contractSender(EncodingTest, cc)

      var b = await ns.getBool().call()
      assert(b == false)

      let r = await ns.setBool(true).send()
      echo "setBool: ", r

      b = await ns.getBool().call()
      assert(b == true)

      let data1data = @[1.byte, 2, 3, 4, 5]
      discard await ns.setData1(123.u256, data1data).send()

      let data1 = await ns.getData1().call()
      assert(data1.a == 123.u256)
      assert(data1.data == data1data)

      let manyData1 = await ns.getManyData1().call()
      assert(manyData1.len == 3)
      for i in 0 .. manyData1.high:
        assert(manyData1[i].a == 123.u256)
        assert(manyData1[i].data == data1data)

    waitFor asynctest()

  test "number storage":
    proc asynctest {.async.} =
      let
        receipt = await web3.deployContract(NumberStorageCode)
        cc = receipt.contractAddress.get
      echo "Deployed NumberStorage contract: ", cc

      let ns = web3.contractSender(NumberStorage, cc)

      echo "setnumber: ", await ns.setNumber(5.u256).send()

      let n = await ns.getNumber().call()
      assert(n == 5.u256)

    waitFor asynctest()

  test "metacoin":
    proc asynctest {.async.} =
      let
        receipt = await web3.deployContract(MetaCoinCode)
        cc = receipt.contractAddress.get

      let deployedAtBlock = distinctBase(receipt.blockNumber)
      echo "Deployed MetaCoin contract: ", cc, " at block ", deployedAtBlock

      let ns = web3.contractSender(MetaCoin, cc)

      let notifFut = newFuture[void]()
      var notificationsReceived = 0

      let s = await ns.subscribe(Transfer) do (
          fromAddr, toAddr: Address, value: UInt256)
          {.raises: [], gcsafe.}:
        try:
          echo "onTransfer: ", fromAddr, " transferred ", value, " to ", toAddr
          inc notificationsReceived
          assert(fromAddr == web3.defaultAccount)
          assert((notificationsReceived == 1 and value == 50.u256) or
                  (notificationsReceived == 2 and value == 100.u256))
          if notificationsReceived == 2:
            notifFut.complete()
        except Exception as err:
          # chronos still raises exceptions which inherit directly from Exception
          doAssert false, err.msg

      echo "getbalance (now): ", await ns.getBalance(web3.defaultAccount).call()
      echo "getbalance (after creation): ", await ns.getBalance(web3.defaultAccount).call(blockNumber = deployedAtBlock)

      # Let's try to get the balance at a point in time where the contract was not deployed yet:
      try:
        echo "getbalance (first block): ", await ns.getBalance(web3.defaultAccount).call(blockNumber = 1'u64)
      except CatchableError as err:
        echo "getbalance (first block): ", err.msg

      echo "sendCoin: ", await ns.sendCoin(accounts[1], 50.u256).send()

      let newBalance1 = await ns.getBalance(web3.defaultAccount).call()
      assert(newBalance1 == 9950.u256)

      let newBalance2 = await ns.getBalance(accounts[1]).call()
      assert(newBalance2 == 50.u256)

      echo "sendCoin: ", await ns.sendCoin(accounts[1], 100.u256).send()

      echo "transfers: ", await ns.getJsonLogs(
        Transfer,
        fromBlock = some(blockId(deployedAtBlock)),
        toBlock = some(blockId(1000'u64)))

      await notifFut
      await s.unsubscribe()

    waitFor asynctest()
